source('D:/Documentos/TestesdeEmprego/novolab/aplicacao/creditscore.R', encoding = 'UTF-8')
source('D:/Documentos/TestesdeEmprego/novolab/aplicacao/creditscore.R', encoding = 'UTF-8')
setwd("D:/Documentos/TestesdeEmprego/novolab/aplicacao")
source('D:/Documentos/TestesdeEmprego/novolab/aplicacao/aplicacao.R', encoding = 'UTF-8')
source('D:/Documentos/TestesdeEmprego/credit_risk/pacotes.R')
df <- data.table::fread('../dados/dataset.csv',
sep=",",
showProgress = FALSE)  %>%
data.frame(stringsAsFactors = F)
df %>% head()
apply(df,2,function(x) sum(as.numeric(x=="")))
df$Gender[df$Gender == ""] = 'vnd'
df$Married[df$Married == ""] = 'vnd'
df$Dependents[df$Dependents == ""] = 'vnd'
df$Self_Employed[df$Self_Employed == ""] = 'vnd'
str(df)
df %>% distinct(Loan_ID, .keep_all = TRUE)
skimr::skim(df)
skimr::skim(df)[1]
ddd <- skimr::skim(df)
ddd$stat
ddd$formatted
ddd$variable
ddd$type
skimr::skim(df)
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
include = TRUE,
fig.path = "figures/",
fig.width = 15,
fig.height = 6)
source('../funcoes.R')
source('../pacotes.R')
df <- data.table::fread('../dados/dataset.csv',
sep=",",
showProgress = FALSE)  %>%
data.frame(stringsAsFactors = F)
df %>% head()
apply(df,2,function(x) sum(as.numeric(x=="")))
df$Gender[df$Gender == ""] = 'vnd'
df$Married[df$Married == ""] = 'vnd'
df$Dependents[df$Dependents == ""] = 'vnd'
df$Self_Employed[df$Self_Employed == ""] = 'vnd'
str(df)
df %>% distinct(Loan_ID, .keep_all = TRUE)
df %>%
select(Loan_Status) %>%
table %>%
prop.table() %>%
barplot(beside= T,
main = 'Proporções da Classes N e Y',
xlab = 'Proporções',
ylab = 'classes',
col = c('red','lightblue'),
horiz = T,
las = 2,
xlim = c(0,1),
legend.text = c(0.31,0.69))
p0 <- ggdensity(df, x = 'LoanAmount',
fill = "#0073C2FF", color = "black",
add = "mean", rug = TRUE) +
labs(title = 'Distribuição da densidade da variável LoanAmount') +
theme_dark()
p1 <- ggplot(df, aes(x = LoanAmount)) +
geom_histogram(bins = 80,
color = "black",
fill = "#0073C2FF") +
labs(title = 'Distribuição de frequência da variável LoanAmount') +
theme_dark()
gridExtra::grid.arrange(p0,p1,nrow = 1)
df[,unlist(lapply(df,is.character))] = df[,unlist(lapply(df,is.character))] %>%
apply(2,as.factor) %>%
data.frame()
df %>% head()
skimr::skim(df)
count(df,Credit_History)
df$Credit_History = as.factor(df$Credit_History)
df %>% head()
df[is.na(df$Credit_History),] %>%
select(Loan_Status) %>%
table %>%
prop.table()
rbind("df" = summary(df$LoanAmount),
"df.missing" = summary(df[is.na(df$Credit_History),'LoanAmount'])) %>% data.frame()
df[is.na(df$Loan_Amount_Term),] %>%
select(Loan_Status) %>%
table %>%
prop.table()
rbind("df" = summary(df$LoanAmount),
"Loan_Amount_Term_Missing" = summary(df[is.na(df$Loan_Amount_Term),'LoanAmount'])) %>% data.frame()
df[is.na(df$LoanAmount),] %>%
select(Loan_Status) %>%
table %>%
prop.table()
df.Credit_History <- df %>% select(-Loan_Amount_Term,-LoanAmount)
df.Loan_Amount_Term <- df %>% select(-Credit_History,-LoanAmount)
df.LoanAmount <- df %>% select(-Credit_History,-Loan_Amount_Term)
vars <- c('Loan_Amount_Term','Credit_History','LoanAmount')
list.df <- list(df.Loan_Amount_Term,
df.Credit_History,
df.LoanAmount)
f.pred <- function(fac,df.var,rf.model,var){
new.df <- df.var[is.na(df.var[,var]),!(names(df.var) %in% var)]
pred_rf <- predict(rf.model, newdata =  new.df)
fac[is.na(fac[,var]),var] <- pred_rf
return(fac)
}
set.seed(12345)
# Para usar no modelo de Imput by Regression
fitControl_a <- trainControl(method="cv",
number=5,
savePredictions = 'final')
# Para usar no modelo de Imput by classfication
fitControl_b <- trainControl(method="cv",
number=5,
savePredictions = 'final',
classProbs= F,
summaryFunction = multiClassSummary)
dfa = df
set.seed(12345)
# Crio uma lista para armazenar os modelos
rf.list <- list()
j <- 1
for(j in 1:length(vars)){
# atribuo em df um df."variavel" sem os valor nulos
dfx <- list.df[[j]] %>% na.omit()
# train model regressin with random-forest
if( vars[j] %in% vars[c(1,3)] ){
rf.list[[j]] <- train(eval(parse(text = paste(vars[j],'~.'))),
data = dfx[,-1],
tuneLength=5,
trControl = fitControl_a,
method='rf')
}
# train model classification with random-forest
if( vars[j] %in% vars[2] ){
rf.list[[j]] <- train(eval(parse(text = paste(vars[j],'~.'))),
data = dfx[,-1],
tuneLength=5,
trControl = fitControl_b,
method='rf')
}
# imputo as categorias faltantes no valores nulos das variáveis
dfa <- f.pred(dfa,list.df[[j]],rf.list[[j]],vars[j])
cat(j,' - ')
}
anyNA(dfa)
summary(df[,vars])
summary(dfa[,vars])
importance.vars(df[,-1],'Loan_Status')
set.seed(2510)
boruta.imp <- Boruta(LoanAmount ~ ., data=df[,-1], doTrace=2)  # perform Boruta search
skimr::skim(df)
dfa
set.seed(12345)
# Crio uma lista para armazenar os modelos
rf.list <- list()
j<-1
# atribuo em df um df."variavel" sem os valor nulos
dfx <- list.df[[j]] %>% na.omit()
dfx
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
include = TRUE,
fig.path = "figures/",
fig.width = 15,
fig.height = 6)
source('../funcoes.R')
source('../pacotes.R')
df <- data.table::fread('../dados/dataset.csv',
sep=",",
showProgress = FALSE)  %>%
data.frame(stringsAsFactors = F)
df %>% head()
apply(df,2,function(x) sum(as.numeric(x=="")))
df$Gender[df$Gender == ""] = 'vnd'
df$Married[df$Married == ""] = 'vnd'
df$Dependents[df$Dependents == ""] = 'vnd'
df$Self_Employed[df$Self_Employed == ""] = 'vnd'
str(df)
df %>% distinct(Loan_ID, .keep_all = TRUE)
df %>%
select(Loan_Status) %>%
table %>%
prop.table() %>%
barplot(beside= T,
main = 'Proporções da Classes N e Y',
xlab = 'Proporções',
ylab = 'classes',
col = c('red','lightblue'),
horiz = T,
las = 2,
xlim = c(0,1),
legend.text = c(0.31,0.69))
p0 <- ggdensity(df, x = 'LoanAmount',
fill = "#0073C2FF", color = "black",
add = "mean", rug = TRUE) +
labs(title = 'Distribuição da densidade da variável LoanAmount') +
theme_dark()
p1 <- ggplot(df, aes(x = LoanAmount)) +
geom_histogram(bins = 80,
color = "black",
fill = "#0073C2FF") +
labs(title = 'Distribuição de frequência da variável LoanAmount') +
theme_dark()
gridExtra::grid.arrange(p0,p1,nrow = 1)
df[,unlist(lapply(df,is.character))] = df[,unlist(lapply(df,is.character))] %>%
apply(2,as.factor) %>%
data.frame()
df %>% head()
skimr::skim(df)
count(df,Credit_History)
df$Credit_History = as.factor(df$Credit_History)
df %>% head()
df[is.na(df$Credit_History),] %>%
select(Loan_Status) %>%
table %>%
prop.table()
rbind("df" = summary(df$LoanAmount),
"df.missing" = summary(df[is.na(df$Credit_History),'LoanAmount'])) %>% data.frame()
df[is.na(df$Loan_Amount_Term),] %>%
select(Loan_Status) %>%
table %>%
prop.table()
rbind("df" = summary(df$LoanAmount),
"Loan_Amount_Term_Missing" = summary(df[is.na(df$Loan_Amount_Term),'LoanAmount'])) %>% data.frame()
df[is.na(df$LoanAmount),] %>%
select(Loan_Status) %>%
table %>%
prop.table()
df.Credit_History <- df %>% select(-Loan_Amount_Term,-LoanAmount)
df.Loan_Amount_Term <- df %>% select(-Credit_History,-LoanAmount)
df.LoanAmount <- df %>% select(-Credit_History,-Loan_Amount_Term)
vars <- c('Loan_Amount_Term','Credit_History','LoanAmount')
list.df <- list(df.Loan_Amount_Term,
df.Credit_History,
df.LoanAmount)
f.pred <- function(fac,df.var,rf.model,var){
new.df <- df.var[is.na(df.var[,var]),!(names(df.var) %in% var)]
pred_rf <- predict(rf.model, newdata =  new.df)
fac[is.na(fac[,var]),var] <- pred_rf
return(fac)
}
set.seed(12345)
# Para usar no modelo de Imput by Regression
fitControl_a <- trainControl(method="cv",
number=5,
savePredictions = 'final')
# Para usar no modelo de Imput by classfication
fitControl_b <- trainControl(method="cv",
number=5,
savePredictions = 'final',
classProbs= F,
summaryFunction = multiClassSummary)
dfa = df
set.seed(12345)
rf.list <- list()
j<-1
# atribuo em df um df."variavel" sem os valor nulos
dfx <- list.df[[j]] %>% na.omit()
dfx
vars[j]
rf.list[[j]] <- train(eval(parse(text = paste(vars[j],'~.'))),
data = dfx[,-1],
tuneLength=5,
trControl = fitControl_a,
method='rf')
list.df[[j]]
train(eval(parse(text = paste(vars[j],'~.'))),
data = dfx[,-1],
tuneLength=5,
trControl = fitControl_b,
method='rf')
dfx[,-1]
list.df[[j]]
list.df[[j]][,-1]
caret::train(eval(parse(text = paste(vars[j],'~.'))),
data = list.df[[j]][,-1],
tuneLength=5,
trControl = fitControl_a,
method='rf')
caret::train(eval(parse(text = paste(vars[j],'~.'))),
data = dx[,-1],
tuneLength=5,
trControl = fitControl_a,
method='rf')
caret::train(eval(parse(text = paste(vars[j],'~.'))),
data = dfx[,-1],
tuneLength=5,
trControl = fitControl_a,
method='rf')
skimr::skim_to_wide(df)
source('D:/Documentos/TestesdeEmprego/credit_risk/instalarpacotes.R')
install.packages("knitr")
install.packages("MASS")
